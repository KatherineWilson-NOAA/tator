apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: build-search-indices-
spec:
  nodeSelector:
    webServer: "yes"
  arguments:
    parameters:
    - name: sections
      value: |
        ["media"]
  entrypoint: build-all
  templates:

  # Top level template
  - name: build-all
    steps:
    - - name: getprojects
        template: get-projects
    - - name: build-projects
        template: build-projects
        arguments:
          parameters:
          - name: projects
            value: "{{steps.getprojects.outputs.parameters.projects}}"
          - name: sections
            value: "{{workflow.parameters.sections}}"

  # Gets project IDs in a list and uses them as input to parallel for loop
  - name: get-projects
    container:
      image: "{{workflow.parameters.dockerRegistry}}/tator_online:{{workflow.parameters.version}}"
      command: [sh, -c]
      args: ["python3 manage.py getprojects > /scratch/projects.txt"]
      resources:
        limits:
          cpu: 500m
          memory: 1Gi
      env:
      - name: DJANGO_SECRET_KEY
        valueFrom:
          secretKeyRef:
            name: tator-secrets
            key: djangoSecretKey
      - name: POSTGRES_HOST
        value: "{{workflow.parameters.postgresHost}}"
      - name: POSTGRES_USERNAME
        value: "{{workflow.parameters.postgresUsername}}"
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            name: tator-secrets
            key: postgresPassword
      - name: REDIS_HOST
        value: "{{workflow.parameters.redisHost}}"
      - name: ELASTICSEARCH_HOST
        value: "{{workflow.parameters.elasticsearchHost}}"
      - name: MAIN_HOST
        value: "{{workflow.parameters.domain}}"
      - name: TATOR_DEBUG
        value: "{{workflow.parameters.tatorDebug}}"
      - name: TATOR_USE_MIN_JS
        value: "{{workflow.parameters.useMinJs}}"
      volumeMounts:
      - mountPath: /scratch
        name: scratch
    volumes:
    - name: scratch
      emptyDir: {}
    outputs:
      parameters:
      - name: projects
        valueFrom:
          path: /scratch/projects.txt

  # Executes parallel for loop for list of projects
  - name: build-projects
    inputs:
      parameters:
      - name: projects
      - name: sections
    steps:
    - - name: build-project
        template: build-project
        arguments:
          parameters:
          - name: project
            value: "{{item}}"
          - name: sections
            value: "{{inputs.parameters.sections}}"
        withParam: "{{inputs.parameters.projects}}"

  # Executes sequential for loop for all sections on one project
  - name: build-project
    parallelism: 1
    inputs:
      parameters:
      - name: project
      - name: sections
    steps:
    - - name: build-section
        template: build-section
        arguments:
          parameters:
          - name: project
            value: "{{inputs.parameters.project}}"
          - name: section
            value: "{{item}}"
        withParam: "{{inputs.parameters.sections}}"

  # Builds indices for a given project and section
  - name: build-section
    inputs:
      parameters:
      - name: project
      - name: section
    steps:
    - - name: getchunks
        template: get-chunks
        arguments:
          parameters:
          - name: project
            value: "{{inputs.parameters.project}}"
          - name: section
            value: "{{inputs.parameters.section}}"
    - - name: build-chunks
        template: build-chunks
        arguments:
          parameters:
          - name: project
            value: "{{inputs.parameters.project}}"
          - name: section
            value: "{{inputs.parameters.section}}"
          - name: chunks
            value: "{{steps.getchunks.outputs.parameters.chunks}}"

  # Retrieves chunks that need to be built
  - name: get-chunks
    inputs:
      parameters:
      - name: project
      - name: section
    container:
      image: "{{workflow.parameters.dockerRegistry}}/tator_online:{{workflow.parameters.version}}"
      command: [sh, -c]
      args: ["python3 manage.py getindexchunks {{inputs.parameters.project}} {{inputs.parameters.section}} {{workflow.parameters.maxAgeDays}} > /scratch/chunks.txt"]
      resources:
        limits:
          cpu: 500m
          memory: 1Gi
      env:
      - name: DJANGO_SECRET_KEY
        valueFrom:
          secretKeyRef:
            name: tator-secrets
            key: djangoSecretKey
      - name: POSTGRES_HOST
        value: "{{workflow.parameters.postgresHost}}"
      - name: POSTGRES_USERNAME
        value: "{{workflow.parameters.postgresUsername}}"
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            name: tator-secrets
            key: postgresPassword
      - name: REDIS_HOST
        value: "{{workflow.parameters.redisHost}}"
      - name: ELASTICSEARCH_HOST
        value: "{{workflow.parameters.elasticsearchHost}}"
      - name: MAIN_HOST
        value: "{{workflow.parameters.domain}}"
      - name: TATOR_DEBUG
        value: "{{workflow.parameters.tatorDebug}}"
      - name: TATOR_USE_MIN_JS
        value: "{{workflow.parameters.useMinJs}}"
      volumeMounts:
      - mountPath: /scratch
        name: scratch
    volumes:
    - name: scratch
      emptyDir: {}
    outputs:
      parameters:
      - name: chunks
        valueFrom:
          path: /scratch/chunks.txt


  # Build chunks in parallel loop
  - name: build-chunks
    parallelism: 100
    inputs:
      parameters:
      - name: project
      - name: section
      - name: chunks
    steps:
    - - name: build-chunk
        template: build-chunk
        arguments:
          parameters:
          - name: project
            value: "{{inputs.parameters.project}}"
          - name: section
            value: "{{inputs.parameters.section}}"
          - name: chunk
            value: "{{item}}"
        withParam: "{{inputs.parameters.chunks}}"

  # Build chunk
  - name: build-chunk
    retryStrategy:
      limit: 10
    inputs:
      parameters:
      - name: project
      - name: section
      - name: chunk
    container:
      image: "{{workflow.parameters.dockerRegistry}}/tator_online:{{workflow.parameters.version}}"
      command: ["python3"]
      args: ["manage.py", "buildsearchindices", "{{inputs.parameters.project}}", "{{inputs.parameters.section}}", "{{inputs.parameters.chunk}}", "{{workflow.parameters.maxAgeDays}}"]
      resources:
        limits:
          cpu: 500m
          memory: 1Gi
      env:
      - name: DJANGO_SECRET_KEY
        valueFrom:
          secretKeyRef:
            name: tator-secrets
            key: djangoSecretKey
      - name: POSTGRES_HOST
        value: "{{workflow.parameters.postgresHost}}"
      - name: POSTGRES_USERNAME
        value: "{{workflow.parameters.postgresUsername}}"
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            name: tator-secrets
            key: postgresPassword
      - name: REDIS_HOST
        value: "{{workflow.parameters.redisHost}}"
      - name: ELASTICSEARCH_HOST
        value: "{{workflow.parameters.elasticsearchHost}}"
      - name: MAIN_HOST
        value: "{{workflow.parameters.domain}}"
      - name: TATOR_DEBUG
        value: "{{workflow.parameters.tatorDebug}}"
      - name: TATOR_USE_MIN_JS
        value: "{{workflow.parameters.useMinJs}}"
      - name: OBJECT_STORAGE_HOST
        value: "{{workflow.parameters.objectStorageHost}}"
      - name: OBJECT_STORAGE_REGION_NAME
        value: "{{workflow.parameters.objectStorageRegionName}}"
      - name: BUCKET_NAME
        value: "{{workflow.parameters.objectStorageBucketName}}"
      - name: OBJECT_STORAGE_ACCESS_KEY
        value: "{{workflow.parameters.objectStorageAccessKey}}"
      - name: OBJECT_STORAGE_SECRET_KEY
        value: "{{workflow.parameters.objectStorageSecretKey}}"

