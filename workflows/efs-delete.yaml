apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: efs-delete-
spec:
  nodeSelector:
    webServer: "yes"
  entrypoint: efs-delete-all
  templates:
  # Top level template
  - name: efs-delete-all
    steps:
    - - name: getprojects
        template: get-projects
    - - name: efs-delete-projects
        template: efs-delete-projects
        arguments:
          parameters:
          - name: projects
            value: "{{steps.getprojects.outputs.parameters.projects}}"

  # Gets project IDs in a list and uses them as input to parallel for loop
  - name: get-projects
    container:
      image: "{{workflow.parameters.dockerRegistry}}/tator_online:{{workflow.parameters.version}}"
      command: [sh, -c]
      args: ["python3 manage.py getprojects > /scratch/projects.txt"]
      resources:
        limits:
          cpu: 500m
          memory: 1Gi
      env:
      - name: DJANGO_SECRET_KEY
        valueFrom:
          secretKeyRef:
            name: tator-secrets
            key: djangoSecretKey
      - name: POSTGRES_HOST
        value: "{{workflow.parameters.postgresHost}}"
      - name: POSTGRES_USERNAME
        value: "{{workflow.parameters.postgresUsername}}"
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            name: tator-secrets
            key: postgresPassword
      - name: REDIS_HOST
        value: "{{workflow.parameters.redisHost}}"
      - name: ELASTICSEARCH_HOST
        value: "{{workflow.parameters.elasticsearchHost}}"
      - name: MAIN_HOST
        value: "{{workflow.parameters.domain}}"
      - name: TATOR_DEBUG
        value: "{{workflow.parameters.tatorDebug}}"
      - name: TATOR_USE_MIN_JS
        value: "{{workflow.parameters.useMinJs}}"
      volumeMounts:
      - mountPath: /scratch
        name: scratch
    volumes:
    - name: scratch
      emptyDir: {}
    outputs:
      parameters:
      - name: projects
        valueFrom:
          path: /scratch/projects.txt

  # Executes parallel for loop for list of projects
  - name: efs-delete-projects
    inputs:
      parameters:
      - name: projects
    steps:
    - - name: efs-delete-project
        template: efs-delete-project
        arguments:
          parameters:
          - name: project
            value: "{{item}}"
        withParam: "{{inputs.parameters.projects}}"

  # Executes sequential for loop on one project
  - name: efs-delete-project
    inputs:
      parameters:
      - name: project
    container:
      image: "{{workflow.parameters.dockerRegistry}}/tator_online:{{workflow.parameters.version}}"
      command: [sh, -c]
      args: ["python3 manage.py efsdelete {{inputs.parameters.project}}"]
      resources:
        limits:
          cpu: 1500m
          memory: 6Gi
      env:
      - name: DJANGO_SECRET_KEY
        valueFrom:
          secretKeyRef:
            name: tator-secrets
            key: djangoSecretKey
      - name: POSTGRES_HOST
        value: "{{workflow.parameters.postgresHost}}"
      - name: POSTGRES_USERNAME
        value: "{{workflow.parameters.postgresUsername}}"
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            name: tator-secrets
            key: postgresPassword
      - name: REDIS_HOST
        value: "{{workflow.parameters.redisHost}}"
      - name: ELASTICSEARCH_HOST
        value: "{{workflow.parameters.elasticsearchHost}}"
      - name: MAIN_HOST
        value: "{{workflow.parameters.domain}}"
      - name: TATOR_DEBUG
        value: "{{workflow.parameters.tatorDebug}}"
      - name: TATOR_USE_MIN_JS
        value: "{{workflow.parameters.useMinJs}}"
      - name: OBJECT_STORAGE_HOST
        value: "http://tator-minio:9000"
      - name: OBJECT_STORAGE_REGION_NAME
        value: "us-east-2"
      - name: BUCKET_NAME
        value: "tator"
      - name: OBJECT_STORAGE_ACCESS_KEY
        value: "AKIAIOSFODNN7EXAMPLE"
      - name: OBJECT_STORAGE_SECRET_KEY
        value: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
      volumeMounts:
      - mountPath: /media
        name: main-pv-claim
        subPath: media
      - mountPath: /data/raw
        name: main-pv-claim
        subPath: raw
      - mountPath: /uploads
        name: main-pv-claim
        subPath: upload
    volumes:
    - name: main-pv-claim
      persistentVolumeClaim:
        claimName: main-pv-claim
