version: 2.1
orbs:
  node: circleci/node@4.5.1
  slack: circleci/slack@4.4.2
jobs:
  build-docker-images:
    machine:
      image: ubuntu-2004:202010-01
    environment:
      DOCKER_REGISTRY: cvisionai
    steps:
    - checkout
    - run:
        name: Clone submodules
        command: git submodule update --init
    - run:
        name: Copy helm config
        command: cp helm/tator/values-microk8s.yaml helm/tator/values.yaml
    - run:
        name: Replace registry
        command: sed -i "s/localhost:32000/$DOCKER_REGISTRY/g" helm/tator/values.yaml
    - run:
        name: Display values.yaml
        command: cat helm/tator/values.yaml
    - run:
        name: Log into Docker Hub
        command: echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin
    - run:
        name: Install python
        command: sudo apt-get update && sudo apt-get -y install python3 python3-pip build-essential
    - run:
        name: Install pip packages
        command: pip3 install setuptools wheel sphinx-markdown-builder progressbar2 pyyaml
    - run:
        name: Install node packages
        command: cd ui && npm install && cd ..
    - run:
        name: Make version.py
        command: make main/version.py
    - run:
        name: Make backend image
        command: make tator-image
    - run:
        name: Make OpenAPI schema
        command: make schema
    - store_artifacts:
        path: doc/_build/schema.yaml
        destination: docs/schema.yaml
    - run:
        name: Make python bindings
        command: make python-bindings-only
    - run:
        name: Install python client
        command: pip3 install scripts/packages/tator-py/dist/*.whl
    - run:
        name: Generate Markdown Docs
        command: make markdown-docs && tar cf doc/_build/tator-py.tar doc/_build/tator-py
    - store_artifacts:
        path: doc/_build/tator-py.tar
        destination: docs/tator-py.tar
    - run:
        name: Make postgis image
        command: make postgis-image
    - run:
        name: Make client image
        command: make client-image
  install-and-test:
    machine:
      image: ubuntu-2004:202010-01
    environment:
      DOCKER_REGISTRY: cvisionai
    steps:
    - checkout
    - run:
        name: Setup lightsail instance
        command: ./scripts/lightsail.sh
    - run:
        name: Clone submodules
        command: git submodule update --init
    - run:
        name: Clone source on lightsail
        command: |
          ssh lightsail 'export CIRCLE_BRANCH='"'$CIRCLE_BRANCH'"'; git clone -b $CIRCLE_BRANCH --recurse-submodules https://github.com/cvisionai/tator';
    - run:
        name: Install Tator
        command: ssh lightsail 'cd tator && ./install.sh'
    - run:
        name: Copy whl
        command: scp -r lightsail:/tmp/tator_py_whl /tmp
    - store_artifacts:
        path: /tmp/tator_py_whl
        destination: tator_py_whl
    - run:
        name: Initialize REST tests
        command: ssh lightsail 'cd tator && make testinit'
    - run:
        name: Run REST tests
        command: ssh lightsail 'cd tator && make test'
    - run:
        name: Install front end test dependencies
        command: |
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb;
          sudo -E apt-get -yq --no-install-suggests --no-install-recommends install ./google-chrome-stable_current_amd64.deb;
          sudo -E apt-get -yq --no-install-suggests --no-install-recommends install tesseract-ocr;
          pip3 install playwright pytest-playwright==0.1.2 pytesseract opencv-python;
          export PATH=$PATH:$HOME/.local/bin:/snap/bin;
          playwright install;
    - run:
        name: Front end tests
        command: |
          mkdir /tmp/videos;
          pytest test --base-url=http://$(cat ~/ip_address.txt) --browser=chromium --username=admin --password=admin --videos=/tmp/videos -s;
    - store_artifacts:
        path: /tmp/videos
        destination: videos
    - run:
        name: Copy test directories
        command: cp -r scripts/packages/tator-py/test ./tatorpy_test && cp -r scripts/packages/tator-py/examples .
    - run:
        name: Get API token
        command: |
          curl -d '{username: "admin", password: "admin", refresh: true}' -H 'Content-Type: application/json' http://$(cat ~/ip_address.txt)/rest/Token | jq '.token' > ~/token.txt;
    - run:
        name: Run tator-py tests
        command: pytest tatorpy_test --host=http://$(cat ~/ip_address.txt) --token=$(cat ~/token.txt) -s --keep
    - run:
        name: Cleanup lightsail instance
        command: ./scripts/lightsail_cleanup.sh
        when: always
workflows:
  version: 2
  build-and-test:
    jobs:
    - build-docker-images:
        context: cvisionai
        filters:
          tags:
            only: /.*/
    - install-and-test:
        requires:
        - build-docker-images
        context: cvisionai
        filters:
          tags:
            only: /.*/
