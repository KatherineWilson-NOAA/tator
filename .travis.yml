os: linux
arch: amd64
dist: bionic
language: generic
python:
- "3.8"
node_js:
- "10"
services:
- docker
vm:
  size: x-large

jobs:
  include:
  - stage: build docker images
    install:
    - cp helm/tator/values-microk8s.yaml helm/tator/values.yaml
    - sed -i "s/localhost:32000/$DOCKER_REGISTRY/g" helm/tator/values.yaml
    - cat helm/tator/values.yaml
    - echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin
    - pip install setuptools wheel sphinx-rtd-theme recommonmark mako progressbar2 pyyaml
    - npm install
    script:
    - make main/version.py
    - make python-bindings
    - make postgis-image
    - make client-image
  - stage: install and test
    install:
    - ./install.sh
    script:
    - make testinit
    - make test
    - cp -r scripts/packages/tator-py/test .
    - cp -r scripts/packages/tator-py/examples .
    - export GUNICORN_POD=$(kubectl get pod -l app=gunicorn -o name | head -n 1 | sed
      's/pod\///')
    - export TOKEN=$(kubectl exec -it $GUNICORN_POD -- python3 manage.py shell --command="from rest_framework.authtoken.models import Token; from main.models import User; token, _ = Token.objects.get_or_create(user=User.objects.first()); print(token)")
    - export TOKEN=$(echo $TOKEN | tr -d '\r')
    - pytest test --host=http://$HOST_IP --token=$TOKEN

env:
  global:
  - DOCKER_REGISTRY=cvisionai
  - secure: "S3SgU7Gw3SD5fY68DKPTqiuBK6KzNe11g4R16Sl2MhhyGLZzFEbmJXtSgCihtXE8fHiwuegmAma7qioEyoAN+e1i+4zzc9WepKDGBquQninhuKCDx1gCdlqAk4vEjtv/xu3bgjIO0JUst5CgPBloa5fRUmP6du87xcNzZwJA0lDTXHaMqnjhK8OnS8xQJMu5zeh7I3hPXKHeS8aTvpTI5Eww2O2rzKL+cAKMUyjeBC5KXKFN6pyChmrj73Wi+u6lmhJBGgX7TJ09bScnet+XbvAPuC1rIGx/GKzqaXyqsd1ZgbuIk9LUTY0flqhUkNC1hryAFCyxTXMw45VJAEY6gk+BYmIZDxdMD5y0ZimIgDniiRPPAPL6e1nf6DtLfON2wnoY6YC/X/DY9Pr7CWeLOHCtARnyWiapSIj8XkfyaWxvKR8cDdes1E5m29ogvqWscfTdV3wLpC9M74TtxR4S7JoMGIZrki13A1ykYkqLVwOL8JvEHSeyLlCAaCE83IqreGhXRcPjUY6x/dSOJWdIbCcovLhI5vCr10upmWT+bd7NFXim86Hbm4XC0ICmq0diW8zdk/+zL0bA1J/AB5X8Me5ChGEB+HdCC6ok38wzRnVD7UfSxL2y6GkzMxzoBg5cF//iU9RXhGoacmDQ7k9uPagVmKpRGuTp0Sy4n8mLvYc="
  - secure: "nLr0ULiK2RUfL6AVd1gbvXXbya5tzcaLUlpwoM23vqWfZGORU5MEWoDol/czubbxUIlXPttGMt76yGoFEw+uDZz9M1UtHSz5YiXNHN6EjQZ0PFT9lakkcg3vFMPAe8w4nrCL3+M2YY9BcOnddz1niB0w0KmarOwM8do6DDR8Kr8qRsnO4CVvhqqvNBbKSlFZJdCQu/sgRtWp/3wXA+rWgUJN27P+qh2o8nkDbBo1tcjVmEwZLWq8t3PGckwo23V4KMZIs91w5AcLcuWZolnafuyaWGnoGRKnPhnqRn3Z/fqG9rwNwOnDVd06LOmbaWX7pjUDOEwBnpVu4W6JwG+OVE89BstoGqU/74Y5E/5cTT8YjS9s3+otut5YfFQvtSDVZXW+sPn4ES0LrvjOTjk85U/Gtl2Hup+rqTJaJh38ktt0wA51oGvEWSD+WT2hiq8iFAnGHUClQdjEa4JT3dZN4MJ6qicHe8JKwjWMdn0SqeIYcJos5Qerv1jgfLO/a33rsAU7E+zKeK/+E5n1hXrxU32CP5ZaOIkbuxuZ9ROygAokmIFpw1QIuN3+y+P+/ZO25/lqgLBirQ/YcrBePRCjFbiWSrtEQfOtpPBjr0n2/DAHaWSrnMlkvT7MCobvdzTfOT5NW1ny3VrcnZ8CIuZIw0w53LVVG4U6p2Nbk3+uvo4="
