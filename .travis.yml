os: linux
arch: amd64
dist: bionic
language: python
services:
- docker
vm:
  size: large

before_install:
- cp helm/tator/values-microk8s.yaml helm/tator/values.yaml
- sed -i "s/localhost/$DOCKER_REGISTRY/g" helm/tator/values.yaml
- echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin
- pip install pyyaml

jobs:
  include:
  - stage: build docker images
    install:
    - pip install sphinx-rtd-theme recommonmark mako progressbar2
    - npm install
    script:
    - make images
  - stage: install and test
    install:
    - sudo snap install microk8s --classic --channel=1.17/stable
    - sudo snap install helm
    - sudo apt-get install -y iproute2 net-tools gzip jq
    - export DOCKER_TAG=$(git rev-parse HEAD)
    - docker run -it --rm --name sleepy $DOCKER_REGISTRY/tator_client:$DOCKER_TAG sleep 60
    - docker cp sleepy:/tmp/*.whl scripts/packages/tator-py/dist/.
    - |
      export HOST_INTERFACE=$(ip -details -json link show | jq -r '
      .[] |
            if .linkinfo.info_kind // .link_type == "loopback" then
                empty
            else
                .ifname
            end
      ')
    - export HOST_IP=$(ip addr show $(echo $HOST_INTERFACE | awk '{print $1}') | awk '$1
      == "inet" {gsub(/\/.*$/, "", $2); print $2}')
    - echo "Host interface is $HOST_INTERFACE"
    - echo "Host IP address is $HOST_IP"
    - sed -i "s/<Insert static IP or domain>/$HOST_IP/g" helm/tator/values.yaml
    - cat helm/tator/values.yaml
    - sudo mkdir /media/kubernetes_share
      && sudo mkdir /media/kubernetes_share/elasticsearch
      && sudo chown -R nobody:nogroup /media/kubernetes_share
      && sudo chmod -R 777 /media/kubernetes_share
    - sudo microk8s status --wait-ready
    - curl -sLO $KUBECTL_URL
      && chmod +x kubectl
      && sudo mv ./kubectl /usr/local/bin/kubectl
      && mkdir -p $HOME/.kube
      && sudo chmod 777 $HOME/.kube
      && sudo microk8s config > $HOME/.kube/config
    - kubectl describe nodes
    - yes $HOST_IP-$HOST_IP | sudo microk8s enable dns metallb registry storage
    - kubectl label nodes --all cpuWorker=yes webServer=yes dbServer=yes
    - kubectl create namespace argo
      && kubectl apply -n argo -f $ARGO_MANIFEST_URL
      && kubectl apply -n argo -f argo/workflow-controller-configmap.yaml
    - curl -sLO $ARGO_CLIENT_URL
      && gunzip argo-linux-amd64.gz
      && chmod +x argo-linux-amd64
      && sudo mv ./argo-linux-amd64 /usr/local/bin/argo
      && argo version
    - make main/version.py
    - make cluster-deps
    - make cluster-install
    script:
    - make test
    - export GUNICORN_POD=$(kubectl get pod -l app=gunicorn -o name | head -n 1 | sed
      's/pod\///')
    - kubectl exec -it $GUNICORN_POD -- env DJANGO_SUPERUSER_PASSWORD=travis python3 manage.py
      createsuperuser --username travis --email no-reply@cvisionai.com --noinput
    - cd scripts/packages/tator-py && pip install dist/*.whl && pytest test --host=http://$HOST_IP
      --token=$(kubectl exec -it $GUNICORN_POD -- python3 manage.py shell --command="from
      rest_framework.authtoken.models import Token; print(Token.objects.first())")

env:
  global:
  - KUBECTL_URL="https://storage.googleapis.com/kubernetes-release/release/v1.17.11/bin/linux/amd64/kubectl"
  - ARGO_CLIENT_URL="https://github.com/argoproj/argo-workflows/releases/download/v2.12.11/argo-linux-amd64.gz"
  - ARGO_MANIFEST_URL="https://raw.githubusercontent.com/argoproj/argo-workflows/v2.12.11/manifests/install.yaml"
  - secure: "wiA9mcRcrdR5UwKdaZ5xNqsUFM7KWMhiCdz7T3zsaqJrqsYZ8f8PKIDjEtYxcNYmruh9W1G4sDGJnkzlXoGMQtrXS4265oamlkgScozAysZyotGMk5+D0ZS0P7OGQB14/JkwZqZLC8jNJdwwGWXKHyWICHvvvJx7+XLa4tdFaoTJSdXptDrdM1Zx0NLvRpzvLuf6+CW0O2fyZcPD/X9a5qu50yCp5F1WMHH5wAz4UBVYB+KynT0fzD3tNk1WyrZ97UiUrjCat46cpP/ppNCeZNmZ8s7lScsWYmRIIS3PkIkwcs3bNrYszjX0LW3bvebBwrcfC7TdjFKlc8yp0ob/xdbPeHEKqO01FU0HNk1qaVKIGbMA3KPCxHbh55gOB3eCYQff4iSNKZO3FBH+wXS38uvZcF6hSNvYprLcmFhwLru7l/yh4nAa5+gF2/CzOYh/RrftvPAHMg7DDQvyjPDgy+1uxEYpzJ11d9CRU/KvPylIrg3hoTLIoQCzNOcYVpWgrt6OjGOlxtlkXIWpBhDov+eGKDPQh2ehVqtedXULIsOPxD92Yhf5X5hLmxpm0E4mcC7gHLyKLF3XjIffSpx5anC/1tn1AtT2NvB4lVXDvuWblJYoP1ftcwyIb9X5TQ3XM1yFZrWh4aH6lZh3y5y1w2rzD4Vrx4X9nBPwT6e5S6M="
  - secure: "nLr0ULiK2RUfL6AVd1gbvXXbya5tzcaLUlpwoM23vqWfZGORU5MEWoDol/czubbxUIlXPttGMt76yGoFEw+uDZz9M1UtHSz5YiXNHN6EjQZ0PFT9lakkcg3vFMPAe8w4nrCL3+M2YY9BcOnddz1niB0w0KmarOwM8do6DDR8Kr8qRsnO4CVvhqqvNBbKSlFZJdCQu/sgRtWp/3wXA+rWgUJN27P+qh2o8nkDbBo1tcjVmEwZLWq8t3PGckwo23V4KMZIs91w5AcLcuWZolnafuyaWGnoGRKnPhnqRn3Z/fqG9rwNwOnDVd06LOmbaWX7pjUDOEwBnpVu4W6JwG+OVE89BstoGqU/74Y5E/5cTT8YjS9s3+otut5YfFQvtSDVZXW+sPn4ES0LrvjOTjk85U/Gtl2Hup+rqTJaJh38ktt0wA51oGvEWSD+WT2hiq8iFAnGHUClQdjEa4JT3dZN4MJ6qicHe8JKwjWMdn0SqeIYcJos5Qerv1jgfLO/a33rsAU7E+zKeK/+E5n1hXrxU32CP5ZaOIkbuxuZ9ROygAokmIFpw1QIuN3+y+P+/ZO25/lqgLBirQ/YcrBePRCjFbiWSrtEQfOtpPBjr0n2/DAHaWSrnMlkvT7MCobvdzTfOT5NW1ny3VrcnZ8CIuZIw0w53LVVG4U6p2Nbk3+uvo4="
  - secure: "WTx9zxQS1OF/dPzl3RzgGycR0C6un8RyGS0LgC/AcuolpLL2qm16jVsmwwq3S7Tb4PggyAyJyM86BA8zuSkkEdrOx9OLbknq3AJiyWiLuJTE2of0qO09jYBqhR6w53oKOUBv2bHHuat4DZ2sLyc6ojGr3jzbLXSfsC5/6Mbufc7qhzuDPfbnC3lu9/BX+xvIgl5EieVTKZdUS4AwJjcXpYcjNj0YQM9xzljrrt0JkNfZdXSgRvsThVUIIlp1m7+DKFW0yTImlSUQ5AL8I5oC79hW5ZNjlTAg2HnpgWhr9qFNl3eizgTOEzFRzs0o8BUJ9CrYsGh/Ty7jxfF16h+hgsiizIEUJTtTJVqfCaVSyvMrhhXI6Zt7l1h8MV+8UWaFkTG7x0xZhvHSVR6fobxuFwcBoUjQcMcPdhimznYd3bdRWoSzExBNTFnLpilKjXDI+AQVmgWjNs0waLYGHZ8DrDTKA40oWHKpS4kj62NdRF8m+4ZN0F6bV0wcukY7bn1E5pClBdpWjw2XTDVTuygwd3trrdBE/jKFD3dLfih4FEb0lL/gHqRemBl66Ttf0qq6K7vL64IPd5pJsqbnqIy5Nui5dQMChdwb+bYH5WWVr9zOcxo0G9RbfuG/93HjHNTpF7pXze48kI8bAqBqQwwY9bmEcGLtIejdrLrLMZfrNs4="
