os: linux
arch: amd64
dist: bionic
language: bash
services:
- docker
vm:
  size: large

before_install:
- cp helm/tator/values-microk8s.yaml helm/tator/values.yaml
- sed -i "s/localhost/$DOCKER_REGISTRY/g" helm/tator/values.yaml
- echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin

jobs:
  include:
  - stage: build docker images
    install: make images
  - stage: install and test
    install:
    - sudo snap install microk8s --classic --channel=1.17/stable
    - sudo snap install helm
    - sudo apt-get install -y iproute2 net-tools gzip jq python3 python3-pip
    - pip install sphinx-rtd-theme recommonmark mako progressbar2 pyyaml
    - npm install
    - export DOCKER_TAG=$(git rev-parse HEAD)
    - docker run -it --rm --name sleepy $DOCKER_REGISTRY/tator_client:$DOCKER_TAG sleep 60
    - docker cp sleepy:/tmp/*.whl scripts/packages/tator-py/dist/.
    - |
      export HOST_INTERFACE=$(ip -details -json link show | jq -r '
      .[] |
            if .linkinfo.info_kind // .link_type == "loopback" then
                empty
            else
                .ifname
            end
      ')
    - export HOST_IP=$(ip addr show $(echo $HOST_INTERFACE | awk '{print $1}') | awk '$1
      == "inet" {gsub(/\/.*$/, "", $2); print $2}')
    - echo "Host interface is $HOST_INTERFACE"
    - echo "Host IP address is $HOST_IP"
    - sed -i "s/<Insert static IP or domain>/$HOST_IP/g" helm/tator/values.yaml
    - cat helm/tator/values.yaml
    - sudo mkdir /media/kubernetes_share
      && sudo mkdir /media/kubernetes_share/elasticsearch
      && sudo chown -R nobody:nogroup /media/kubernetes_share
      && sudo chmod -R 777 /media/kubernetes_share
    - sudo microk8s status --wait-ready
    - curl -sLO $KUBECTL_URL
      && chmod +x kubectl
      && sudo mv ./kubectl /usr/local/bin/kubectl
      && mkdir -p $HOME/.kube
      && sudo chmod 777 $HOME/.kube
      && sudo microk8s config > $HOME/.kube/config
    - kubectl describe nodes
    - yes $HOST_IP-$HOST_IP | sudo microk8s enable dns metallb registry storage
    - kubectl label nodes --all cpuWorker=yes webServer=yes dbServer=yes
    - kubectl create namespace argo
      && kubectl apply -n argo -f $ARGO_MANIFEST_URL
      && kubectl apply -n argo -f argo/workflow-controller-configmap.yaml
    - curl -sLO $ARGO_CLIENT_URL
      && gunzip argo-linux-amd64.gz
      && chmod +x argo-linux-amd64
      && sudo mv ./argo-linux-amd64 /usr/local/bin/argo
      && argo version
    - make main/version.py
    - make cluster-deps
    - make cluster-install
    script:
    - make test
    - export GUNICORN_POD=$(kubectl get pod -l app=gunicorn -o name | head -n 1 | sed
      's/pod\///')
    - kubectl exec -it $GUNICORN_POD -- env DJANGO_SUPERUSER_PASSWORD=travis python3 manage.py
      createsuperuser --username travis --email no-reply@cvisionai.com --noinput
    - cd scripts/packages/tator-py && pip install dist/*.whl && pytest test --host=http://$HOST_IP
      --token=$(kubectl exec -it $GUNICORN_POD -- python3 manage.py shell --command="from
      rest_framework.authtoken.models import Token; print(Token.objects.first())")

env:
  global:
  - KUBECTL_URL="https://storage.googleapis.com/kubernetes-release/release/v1.17.11/bin/linux/amd64/kubectl"
  - ARGO_CLIENT_URL="https://github.com/argoproj/argo-workflows/releases/download/v2.12.11/argo-linux-amd64.gz"
  - ARGO_MANIFEST_URL="https://raw.githubusercontent.com/argoproj/argo-workflows/v2.12.11/manifests/install.yaml"
  - secure: lZib+oe6LM4I3JqW1UVBgFYibWDlL4xMIBNYHZODawe6GUJgDd2LRph0j1AtHTS0O+hwliGM/FawqChTNOQ9SHFu2OrV7qT+NslrsfkX/Sw3vDxhc0/wVav17Vbs71eh8qImIWFcJYAsh7lE+Lxxx0nKwaN+zM0igcJoU6SVflRMYvTOcuxMI8c4SE5YJk5C+xqG0zm0dE1Gn2fU/ovZTzknn6pE9uuvaS/kCTPWcvqu0uKXCubTVtSeNnzw6tpAeW0lVhx3sWhiP42Po28DsCHI2ZC/1ZovabJUrrklkzrH0bl1bfO2/U1Xl2aYoV7rHrlA4NLsCibI9XjdmTf87PF7zF/8mhBK0GccfT44/vnGxbedR8bO1kO2Wtk72em3AT736luYmVrYqKL1ymTVZg3Y0ol30+N6VifrGoedeQ+jUV7c1M9XUjIasKfDsMCoXhIWGe0ImEK/7yXES0PCpQT3bIIyH3dWDkGmcwYK4UdQXMHmIWiWS9Y9YFPVQZlv1vrpAPu5KmXXNTn83k5nM7tt7zYPIG6mopPNN+wW/gRXEEhjyMqu+WLJ+4uEUD7o7Osb9PaXMoTPFuja/kCG34lp4nAyEpRbVlLTDxY6S9jdDf7T49jk6Bu5OAafJVgSgpTeulhvky4R2FFtb2crwJx4/j/Z8ifDiVE1HFYrXc8=
  - secure: qHjsCFpl0trHnyXx6mzqX2yGFN2a4nimWKQafw64CreAEfKW71OajgdTgU0zRuXRM4Yo8wQgg8POXaTdw5o+r6qK9iPDJKMvSs7LHQhkQtz4BJGpKdddRDRRtfQJyx31FwY/zvs5jGCLvGrBC6u8P3Bs75tbnqjNKgJUCb04SMRgpX/l89UuRc9snOdeqYCIXS3RjonIaFnPbReekH7+EB8guc39mRbJWyHYKhQCtkaK/sYvW54E5VcgtwDwg6TyiCpqeSKFz5E5/jhFRRFEGfY8zNQPOj/Aso8XzZxGuKo840zF9pO+j+PUTXtF7DMnEgjYjF/me6GrFW5zaE6Vsl3BBo/H7as2QoVnwlh6PBaDDXVSuUH18aS588c4/VOUT+lPeRDHdPea3wCSYecm85dwm+ED2viZSKGtoeHdEW2NjE/4lqPyIBl92BdpK3+u3s03BFY8B1HvdsMh2glIz9NzXOdSv0GJBG02yw5MwL3DJ6HXrjhPf0RScODnTyqwH0fCnQzoIeOFEM+HdN6qprds3mozYLGJBx5MQxT1BtqLYIS5tbvIo2Dlb2zB3dxJJtVGHkOHDAfkuhXl+bqD3C+qD+8JUAlx3NRAWyHYwPJf1ghltFul4NbXDrxxdDE9aUJQmSu7M8XpmW/0Y2qaRyTXU7hBbyZftskcjgifDDY=
  - secure: syYwy/10CR8IlwZ5x1JGVw0RzgKqKzcubkkFPwQCZt5mifMJUmeZXWhZpcqslFz9ALtQfn+WNZxUeM2cl53zSBqNSX3HrOcLnh8LbKFkczBf3TnyZecM1z8TTQ6vYiGK1acLpDaLPBKRxROzHrXocclunAkBMApTXXQbxCBbAWzz4gHNVsnDtgiE9vI+n0WvwlobAn4WLIvE804lDUA5ee/Mo8e8uUXPmhm3w86/tA/JKuABlZY8Tzv6FnK39rBtXnALJHgq5rk0yFnp1028htdUC7J58SC3Rv/oE2rYXL3rzMDvDoSGIs18yyTmGx+1TDwU5y1vTD2e25mNCQAoh6eJN7sso3UsnM61/qy47RVizFWpk7khvJrkes0Bnd0Z0EFW2gCPR2g66u4Sp1GW6NcbxD1Go0AMMu4eryF37n8xUHmowc2p1zeJBe3f6LF0T+zcNu0hypdAAkurBAfYemr6M/l4lKTC1cWNcjccTV1clhpnBWmZ8KD3RTVKkccAwPr+f7tH8fhMJHebbbMsft9ap43JB5dKpgs9zTEw5T0l4Z6vIF6vo1HQLuQxRUXJUqaIlQneZbQoCJlv+544ePPENhyp/voLQZkGyZ0Etp6bk1VtDJw5SWn9ZDtQ7SomdsMwbt7H2OhyiLQLdLxkbXzUU+doLm6F1a2mdUildL8=
