os: linux
arch: amd64
dist: bionic
language: python
services:
- docker
vm:
  size: large

before_install:
- cp helm/tator/values-microk8s.yaml helm/tator/values.yaml
- sed -i "s/localhost/$DOCKER_REGISTRY/g" helm/tator/values.yaml
- echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin
- pip install pyyaml

jobs:
  include:
  - stage: build docker images
    install:
    - pip install sphinx-rtd-theme recommonmark mako progressbar2
    script:
    - make images
  - stage: install and test
    install:
    - sudo snap install microk8s --classic --channel=1.17/stable
    - sudo snap install helm
    - sudo apt-get install -y iproute2 net-tools gzip jq
    - npm install
    - export DOCKER_TAG=$(git rev-parse HEAD)
    - docker run -it --rm --name sleepy $DOCKER_REGISTRY/tator_client:$DOCKER_TAG sleep 60
    - docker cp sleepy:/tmp/*.whl scripts/packages/tator-py/dist/.
    - |
      export HOST_INTERFACE=$(ip -details -json link show | jq -r '
      .[] |
            if .linkinfo.info_kind // .link_type == "loopback" then
                empty
            else
                .ifname
            end
      ')
    - export HOST_IP=$(ip addr show $(echo $HOST_INTERFACE | awk '{print $1}') | awk '$1
      == "inet" {gsub(/\/.*$/, "", $2); print $2}')
    - echo "Host interface is $HOST_INTERFACE"
    - echo "Host IP address is $HOST_IP"
    - sed -i "s/<Insert static IP or domain>/$HOST_IP/g" helm/tator/values.yaml
    - cat helm/tator/values.yaml
    - sudo mkdir /media/kubernetes_share
      && sudo mkdir /media/kubernetes_share/elasticsearch
      && sudo chown -R nobody:nogroup /media/kubernetes_share
      && sudo chmod -R 777 /media/kubernetes_share
    - sudo microk8s status --wait-ready
    - curl -sLO $KUBECTL_URL
      && chmod +x kubectl
      && sudo mv ./kubectl /usr/local/bin/kubectl
      && mkdir -p $HOME/.kube
      && sudo chmod 777 $HOME/.kube
      && sudo microk8s config > $HOME/.kube/config
    - kubectl describe nodes
    - yes $HOST_IP-$HOST_IP | sudo microk8s enable dns metallb registry storage
    - kubectl label nodes --all cpuWorker=yes webServer=yes dbServer=yes
    - kubectl create namespace argo
      && kubectl apply -n argo -f $ARGO_MANIFEST_URL
      && kubectl apply -n argo -f argo/workflow-controller-configmap.yaml
    - curl -sLO $ARGO_CLIENT_URL
      && gunzip argo-linux-amd64.gz
      && chmod +x argo-linux-amd64
      && sudo mv ./argo-linux-amd64 /usr/local/bin/argo
      && argo version
    - make main/version.py
    - make cluster-deps
    - make cluster-install
    script:
    - make test
    - export GUNICORN_POD=$(kubectl get pod -l app=gunicorn -o name | head -n 1 | sed
      's/pod\///')
    - kubectl exec -it $GUNICORN_POD -- env DJANGO_SUPERUSER_PASSWORD=travis python3 manage.py
      createsuperuser --username travis --email no-reply@cvisionai.com --noinput
    - cd scripts/packages/tator-py && pip install dist/*.whl && pytest test --host=http://$HOST_IP
      --token=$(kubectl exec -it $GUNICORN_POD -- python3 manage.py shell --command="from
      rest_framework.authtoken.models import Token; print(Token.objects.first())")

env:
  global:
  - KUBECTL_URL="https://storage.googleapis.com/kubernetes-release/release/v1.17.11/bin/linux/amd64/kubectl"
  - ARGO_CLIENT_URL="https://github.com/argoproj/argo-workflows/releases/download/v2.12.11/argo-linux-amd64.gz"
  - ARGO_MANIFEST_URL="https://raw.githubusercontent.com/argoproj/argo-workflows/v2.12.11/manifests/install.yaml"
  - secure: CjlRbz/6GEKXXuN4ItDBdzYYPf5e+6G0wysbNPdal99zxn/Gs8NEK2z6R8VAQt3kFxhOHDMMSVAJUzRe0qbUM4TgS72LLq4ulLT1bbkxeNmmBScqiKPtzMZar2ZhKYTAJ7+oMUY5jiVHZ3Ekuhu+ptuua4UEXcQPgZHdh2qQTvCU7CsFMv0YjzQiOY4PzxTFVd/cLbd3LM0sfva8nSB3uAcR8/c5+NRr3ztoF9pasLmEVI+GAm9fC6sN3JBHTis57KfhbMakXc7HsWj4CuwGsJ8eMZiW4pdH1Pz34X7fyc9XS2QgSjySwUr1DivRihptjJ5W/8W01l4HjZyX+WIIlX0/j6Qp/zOZBBwMDCf1m6nm9avkmlrm+fcI9IaDLaLPc9p6xJGILXjedjKHKpZvtsUR6spDbas+uQxQCWsiJ1c5ZfkMDoz0Vii7dMW/OeJ3sAYRtz3tjLvVV/XqXqO4q+2rN3touLjk5gqZ1b/Mm9EjgYI+/QipSbRgy3LtH+bNfIN1b/AsPCfT8BorTSDFqR2neLefN3vDRLa6IVP9eMLbINJBV1QBWe1eGn9cDUWFbobx1fr1IzOPXKafm5AA7t0/liZcNbeJEK4K2OthJe5kfDz7LDPwkxAZSXV4x2xWtZobJIlRrCxYE7eInYem+L8fi1LBGvT5RnSV0MhDlQo=
  - secure: rDsMq4yG61i8R1PEMTPVk3Wiv0DgmGelUSD9KCXm6BQPhYhTMpgtEBSi93fpDAUg2vq0Osp215dv/E2kI/lQK8FmZ2j5tpHXM/VCvnnoeyU7cwcOIs+/juoMNoXikUYK7QkCzWszFzj+LQ4FF5GJrnI181MRIbaiNIOTQbot43CvdKz9UtqnhmnVoFsx2QxeDPBQjnQ/yVTuh5mFoJ0mi2IoH0B+RVx6e+FttfL6mVXTmIhfw7r27VKeOVgKd+How1YHg/Ix1d6yATS3pMia6KFI9KPv3mc2i1uQ1kOXrpdzg+wA9L1Zc1VBW0+UCUjMtA+dI6luL6cN9l69gUQ34l1OqsJV8iH0aM2edOmQYuIXVR0a7DTEo6EDnMSHz677x6jJ+ZiMoPc1IlHcRreQDtiSfyhBghU21ekOTf9pc7YdAsfffc1IHNggAHLosaXmCEFU3b/jcfJSM8FtfJ7JYy3hmzPYKE5NS83hl87poX8BaP3IVvnYot1JE6zjhvnNlMtrSVkopSs9N93N+SbFyUv1bIvsM7OPPi6iYBHxHrTa+Bwgu1zgkFEg951sbd6uIf0vFePL23tH+qswqMw8yrWpH868LTfKbtJspD50y4KFm+Oedbi64LDjdaCHPdGPp960n9AXGMlozr4eODJHbrYMyNbZqtGL2qRbLaEZ6ME=
  - secure: kpm5sGR+zNLBaOlR/JPPJIBYL85e36t2uDwUVeysQQ6bnS6bYP8n4fIs/il0zFIfhZPN1DaQROauhI9cS2QIkgxbJeS0vhsTCfoMeiR5eHEQnaGrnE2ixOa/oU1yGRJUSXRuVDyGzKb+fhsLOST4hqaFJjReZzHbotWQtWC9Oc8/1N7TJ0F4aLFTruMVDmzq61l8uVT0NsgNfFjBWq0L6s6ld41lvof6+N5AFfrPzbE5tiZKz4lLK+RQ+e0sCRgNhkQK3maU79a8VDmPolsrDKX40ZvbCBqlaDCDmVq5b+MoP1/7U6oaV7O5XNvTmPmtC7xizZL8JeSRQMNXfJthu/Tn3Gb0FZ8FMO0JWu8xIV73xwdtVpzf41XNcv/sir9Uh5OptoCULYRYui+SHVPcsyE5mDb5588mug2Pne9mINgwDVNlwq/O8wHWKbvpJ2lX8DN/5kd7OEmU+ypNdJZQXq82xlOEOu8v6FVM0LaJxqNPtUCpno6aPr5Fn4OO35x2arvaQsHptzfn8SylUQN4bdGwI8nQ2coDLocfr86RTOTqxb+ddOMoRAuhzTbfOBtHCuxN2pvlF7hhXxepcMr6eJnBj1rohiwsKbXmDYeFFsV8d09D4DOeLqlE6n3vx8LJZwSzCocnIxghwGU4egFiY8HKFgMozMRHmGXlRJTveEw=
