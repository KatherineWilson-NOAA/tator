os: linux
arch: amd64
dist: bionic
language: python
services:
- docker
vm:
  size: large

before_install:
- cp helm/tator/values-microk8s.yaml helm/tator/values.yaml
- sed -i "s/localhost:32000/$DOCKER_REGISTRY/g" helm/tator/values.yaml
- cat helm/tator/values.yaml
- echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin
- pip install pyyaml

jobs:
  include:
  - stage: build docker images
    install:
    - pip install sphinx-rtd-theme recommonmark mako progressbar2
    - npm install
    script:
    - make main/version.py
    - make python-bindings
    - make postgis-image
    - make client-image
  - stage: install and test
    install:
    - sudo snap install microk8s --classic --channel=1.17/stable
    - sudo snap install helm
    - sudo apt-get install -y iproute2 net-tools gzip jq
    - export DOCKER_TAG=$(git rev-parse HEAD)
    - docker run -it --rm --name sleepy $DOCKER_REGISTRY/tator_client:$DOCKER_TAG sleep 60
    - docker cp sleepy:/tmp/*.whl scripts/packages/tator-py/dist/.
    - |
      export HOST_INTERFACE=$(ip -details -json link show | jq -r '
      .[] |
            if .linkinfo.info_kind // .link_type == "loopback" then
                empty
            else
                .ifname
            end
      ')
    - export HOST_IP=$(ip addr show $(echo $HOST_INTERFACE | awk '{print $1}') | awk '$1
      == "inet" {gsub(/\/.*$/, "", $2); print $2}')
    - echo "Host interface is $HOST_INTERFACE"
    - echo "Host IP address is $HOST_IP"
    - sed -i "s/<Insert static IP or domain>/$HOST_IP/g" helm/tator/values.yaml
    - cat helm/tator/values.yaml
    - sudo mkdir /media/kubernetes_share
      && sudo mkdir /media/kubernetes_share/elasticsearch
      && sudo chown -R nobody:nogroup /media/kubernetes_share
      && sudo chmod -R 777 /media/kubernetes_share
    - sudo microk8s status --wait-ready
    - curl -sLO $KUBECTL_URL
      && chmod +x kubectl
      && sudo mv ./kubectl /usr/local/bin/kubectl
      && mkdir -p $HOME/.kube
      && sudo chmod 777 $HOME/.kube
      && sudo microk8s config > $HOME/.kube/config
    - kubectl describe nodes
    - yes $HOST_IP-$HOST_IP | sudo microk8s enable dns metallb registry storage
    - kubectl label nodes --all cpuWorker=yes webServer=yes dbServer=yes
    - kubectl create namespace argo
      && kubectl apply -n argo -f $ARGO_MANIFEST_URL
      && kubectl apply -n argo -f argo/workflow-controller-configmap.yaml
    - curl -sLO $ARGO_CLIENT_URL
      && gunzip argo-linux-amd64.gz
      && chmod +x argo-linux-amd64
      && sudo mv ./argo-linux-amd64 /usr/local/bin/argo
      && argo version
    - make main/version.py
    - make cluster-deps
    - make cluster-install
    script:
    - make test
    - export GUNICORN_POD=$(kubectl get pod -l app=gunicorn -o name | head -n 1 | sed
      's/pod\///')
    - kubectl exec -it $GUNICORN_POD -- env DJANGO_SUPERUSER_PASSWORD=travis python3 manage.py
      createsuperuser --username travis --email no-reply@cvisionai.com --noinput
    - cd scripts/packages/tator-py && pip install dist/*.whl && pytest test --host=http://$HOST_IP
      --token=$(kubectl exec -it $GUNICORN_POD -- python3 manage.py shell --command="from
      rest_framework.authtoken.models import Token; print(Token.objects.first())")

env:
  global:
  - KUBECTL_URL="https://storage.googleapis.com/kubernetes-release/release/v1.17.11/bin/linux/amd64/kubectl"
  - ARGO_CLIENT_URL="https://github.com/argoproj/argo-workflows/releases/download/v2.12.11/argo-linux-amd64.gz"
  - ARGO_MANIFEST_URL="https://raw.githubusercontent.com/argoproj/argo-workflows/v2.12.11/manifests/install.yaml"
  - secure: "S3SgU7Gw3SD5fY68DKPTqiuBK6KzNe11g4R16Sl2MhhyGLZzFEbmJXtSgCihtXE8fHiwuegmAma7qioEyoAN+e1i+4zzc9WepKDGBquQninhuKCDx1gCdlqAk4vEjtv/xu3bgjIO0JUst5CgPBloa5fRUmP6du87xcNzZwJA0lDTXHaMqnjhK8OnS8xQJMu5zeh7I3hPXKHeS8aTvpTI5Eww2O2rzKL+cAKMUyjeBC5KXKFN6pyChmrj73Wi+u6lmhJBGgX7TJ09bScnet+XbvAPuC1rIGx/GKzqaXyqsd1ZgbuIk9LUTY0flqhUkNC1hryAFCyxTXMw45VJAEY6gk+BYmIZDxdMD5y0ZimIgDniiRPPAPL6e1nf6DtLfON2wnoY6YC/X/DY9Pr7CWeLOHCtARnyWiapSIj8XkfyaWxvKR8cDdes1E5m29ogvqWscfTdV3wLpC9M74TtxR4S7JoMGIZrki13A1ykYkqLVwOL8JvEHSeyLlCAaCE83IqreGhXRcPjUY6x/dSOJWdIbCcovLhI5vCr10upmWT+bd7NFXim86Hbm4XC0ICmq0diW8zdk/+zL0bA1J/AB5X8Me5ChGEB+HdCC6ok38wzRnVD7UfSxL2y6GkzMxzoBg5cF//iU9RXhGoacmDQ7k9uPagVmKpRGuTp0Sy4n8mLvYc="
  - secure: "nLr0ULiK2RUfL6AVd1gbvXXbya5tzcaLUlpwoM23vqWfZGORU5MEWoDol/czubbxUIlXPttGMt76yGoFEw+uDZz9M1UtHSz5YiXNHN6EjQZ0PFT9lakkcg3vFMPAe8w4nrCL3+M2YY9BcOnddz1niB0w0KmarOwM8do6DDR8Kr8qRsnO4CVvhqqvNBbKSlFZJdCQu/sgRtWp/3wXA+rWgUJN27P+qh2o8nkDbBo1tcjVmEwZLWq8t3PGckwo23V4KMZIs91w5AcLcuWZolnafuyaWGnoGRKnPhnqRn3Z/fqG9rwNwOnDVd06LOmbaWX7pjUDOEwBnpVu4W6JwG+OVE89BstoGqU/74Y5E/5cTT8YjS9s3+otut5YfFQvtSDVZXW+sPn4ES0LrvjOTjk85U/Gtl2Hup+rqTJaJh38ktt0wA51oGvEWSD+WT2hiq8iFAnGHUClQdjEa4JT3dZN4MJ6qicHe8JKwjWMdn0SqeIYcJos5Qerv1jgfLO/a33rsAU7E+zKeK/+E5n1hXrxU32CP5ZaOIkbuxuZ9ROygAokmIFpw1QIuN3+y+P+/ZO25/lqgLBirQ/YcrBePRCjFbiWSrtEQfOtpPBjr0n2/DAHaWSrnMlkvT7MCobvdzTfOT5NW1ny3VrcnZ8CIuZIw0w53LVVG4U6p2Nbk3+uvo4="
  - secure: "MIj/duh1ERMo0vM7CCCyfLkN2lXbxbwrKfqFXSxKCQmsTECbr13RbxmdQLnVCaTepAp/qMn/kNyoapQAG2nu+BXX11cdjD2dyUE88Zw6MOD3pdvNhrkhpNHBLoXfmYMH/ZKuH6P5/LT3ZPSfq+SCo6Djxy+MUycb47wACVWjLFnjlLZeOMjssBK0XwfN11CS+yHSrGrgAXJ77XQdwlRSFGpbtIovyt95rxFZJwiPl7JcU9vMOk2tE8ZGlslC5Q6jQEJkWJxxRQ7ln1bVtknrqxWqeufrXrcR7mSv/RzEq5HCJrn1uaFJKyI2u6k5mC3BSwbIm/cgRDKOhpClai2bEX0c9RFzNDsnCpp4ESQC1S4ciCPvBpN0e4tl/iJfqYG+vMeT61T/uFPH/fBKtIJ3K7pbm/WoUuqz7NeGVXxh1RgyoauJGVvHdLNg4d953VjStm+jhh/VQJQIzBVN5+e5adP/ZvugJWegPMttWK1IaT0mDhQOSOzrjp8oOpdgSVQIRrwir7uZ6SyXZIR25B+FDrgckZdhU3b95a8ZgY9lqAsCgdlaf9aXxtX/5WwTA9jRbiTXr325s98OynlKXOi0HPYE6HN3LrSDpPv89gaz8uVI9etD6PcsvpBM3rDq+P9RYOXSY7eT4PvLeEwkAK80Jk5hm64g3QPa+vHZbL/xB1M="
