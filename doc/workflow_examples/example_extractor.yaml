apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: example-extractor- #Use of a descriptive name is recommended
spec:
  entrypoint: pipeline
  ttlStrategy:
    SecondsAfterSuccess: 600
    SecondsAfterFailure: 86400
  volumeClaimTemplates:
  - metadata:
      name: workdir
    spec:
      storageClassName: aws-efs
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1024Mi # Change based on maximum expected file size of a single video
  volumes:
  - name: dockersock
    hostPath:
      path: /var/run/docker.sock
  templates:
  - name: pipeline
    steps:
    - - name: worker
        template: worker
  - name: worker
    nodeSelector:
      cpuWorker: "yes"
    container:
      image: cvisionai/tator_client:latest
      imagePullPolicy: Always
      resources:
        requests:
          cpu: 4000m
      env:
      - name: TATOR_MEDIA_IDS
        value: "{{workflow.parameters.media_ids}}"
      - name: TATOR_API_SERVICE
        value: "{{workflow.parameters.rest_url}}"
      - name: TATOR_AUTH_TOKEN
        value: "{{workflow.parameters.rest_token}}"
      - name: TATOR_PROJECT_ID
        value: "{{workflow.parameters.project_id}}"
      - name: EXTRACT_MODE
        value: "localization_thumbnail" # Change this to desired mode
      - name: METADATA_TYPE_ID
        value: "65" # Change this to the metadata you are extracting
      - name: OUTPUT_SECTION
        value: "test" # Change this to output section
      - name: OUTPUT_TYPE_ID
        value: "33" # Change this to your output type id
      volumeMounts:
      - name: workdir
        mountPath: /work
      command: [python3]
      args: ["-m", "tator.extractor.env_launcher"]
